type: edu
custom_name: stage5
files:
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import tictactoe.Main;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;

    enum FieldState {
        X, O, FREE;

        static FieldState get(char symbol) {
            switch (symbol) {
                case 'X': return X;
                case 'O': return O;
                case ' ':
                case '_':
                    return FREE;
                default: return null;
            }
        }
    }

    class TicTacToeField {

        final FieldState[][] field;

        TicTacToeField(FieldState[][] field) {
            this.field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    this.field[row][col] = field[row][col];
                }
            }
        }

        TicTacToeField(String str) {
            field = new FieldState[3][3];

            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    field[row][col] =
                        FieldState.get(str.charAt(((2 - row) * 3 + col)));
                }
            }
        }

        boolean equalTo(TicTacToeField other) {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean hasNextAs(TicTacToeField other) {
            boolean improved = false;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        if (field[i][j] == FieldState.FREE && !improved) {
                            improved = true;
                        }
                        else {
                            return false;
                        }
                    }
                }
            }
            return improved;
        }

        boolean isCloseTo(TicTacToeField other) {
            return equalTo(other)
                || hasNextAs(other)
                || other.hasNextAs(this);
        }

        static TicTacToeField parse(String fieldStr) {

            try {
                List<String> lines = fieldStr
                    .lines()
                    .map(String::strip)
                    .filter(e ->
                        e.startsWith("|")
                            && e.endsWith("|"))
                    .collect(Collectors.toList());

                for (String line : lines) {
                    if (line.length() != 9) {
                        throw new WrongAnswer("Line of Tic-Tac-Toe " +
                            "field should be 9 characters long\n" +
                            "found " + line.length() + " characters in \"" + line + "\"");
                    }
                    for (char c : line.toCharArray()) {
                        if (c != 'X'
                            && c != 'O'
                            && c != '|'
                            && c != ' '
                            && c != '_') {
                            return null;
                        }
                    }
                }

                FieldState[][] field = new FieldState[3][3];

                int y = 2;
                for (String line : lines) {
                    char[] cols = new char[] {
                        line.charAt(2),
                        line.charAt(4),
                        line.charAt(6)
                    };

                    int x = 0;
                    for (char c : cols) {
                        FieldState state = FieldState.get(c);
                        if (state == null) {
                            return null;
                        }
                        field[y][x] = state;
                        x++;
                    }
                    y--;
                }

                return new TicTacToeField(field);
            } catch (Exception ex) {
                return null;
            }
        }

        static List<TicTacToeField> parseAll(String output) {
            List<TicTacToeField> fields = new ArrayList<>();

            List<String> lines = output
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            String candidateField = "";
            boolean insideField = false;
            for (String line : lines) {
                if (line.contains("----") && !insideField) {
                    insideField = true;
                    candidateField = "";
                } else if (line.contains("----") && insideField) {
                    TicTacToeField field = TicTacToeField.parse(candidateField);
                    if (field != null) {
                        fields.add(field);
                    }
                    insideField = false;
                }

                if (insideField && line.startsWith("|")) {
                    candidateField += line + "\n";
                }
            }

            return fields;
        }

    }


    class Clue {
        int x, y;
        Clue(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    public class TicTacToeTest extends StageTest<Clue> {
        public TicTacToeTest() throws Exception {
            super(Main.class);
        }

        static String[] inputs = new String[] {
            "1 1", "1 2", "1 3",
            "2 1", "2 2", "2 3",
            "3 1", "3 2", "3 3"
        };

        String iterateCells(String initial) {
            int index = -1;
            for (int i = 0; i < inputs.length; i++) {
                if (initial.equals(inputs[i])) {
                    index = i;
                    break;
                }
            }
            if (index == -1) {
                return "";
            }
            String fullInput = "";
            for (int i = index; i < index + 9; i++) {
                fullInput += inputs[i % inputs.length] + "\n";
            }
            return fullInput;
        }

        @Override
        public List<TestCase<Clue>> generate() {

            List<TestCase<Clue>> tests = new ArrayList<>();

            int i = 0;
            for (String input : inputs) {
                String fullMoveInput = iterateCells(input);

                String[] strNums = input.split(" ");
                int x = Integer.parseInt(strNums[0]);
                int y = Integer.parseInt(strNums[1]);

                if (i % 2 == 1) {
                    // mix with incorrect data
                    fullMoveInput = "4 " + i + "\n" + fullMoveInput;
                }

                String fullGameInput = "";
                for (int j = 0; j < 9; j++) {
                    fullGameInput += fullMoveInput;
                }

                String initial;

                switch (i % 6) {
                    case 0: initial = "start user easy\n"; break;
                    case 1: initial = "start easy user\n"; break;
                    case 2: initial = "start user medium\n"; break;
                    case 3: initial = "start medium user\n"; break;
                    case 4: initial = "start user hard\n"; break;
                    case 5: initial = "start hard user\n"; break;
                    default: continue;
                }

                fullGameInput = initial + fullGameInput + "exit";

                tests.add(new TestCase<Clue>()
                    .setInput(fullGameInput));

                i++;
            }

            tests.add(new TestCase<Clue>()
                .setInput("start easy easy\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start medium medium\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start hard hard\nexit"));


            tests.add(new TestCase<Clue>()
                .setInput("start medium easy\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start easy medium\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start medium hard\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start hard medium\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start easy hard\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start hard easy\nexit"));


            tests.add(new TestCase<Clue>()
                .setInput("start user user\n" +
                    "1 1\n" +
                    "2 2\n" +
                    "1 2\n" +
                    "2 1\n" +
                    "1 3\n" +
                    "exit"));

            return tests;
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            List<TicTacToeField> fields = TicTacToeField.parseAll(reply);

            if (fields.size() == 0) {
                return new CheckResult(false, "No fields found");
            }

            for (int i = 1; i < fields.size(); i++) {
                TicTacToeField curr = fields.get(i - 1);
                TicTacToeField next = fields.get(i);

                if (!(curr.equalTo(next) || curr.hasNextAs(next))) {
                    return new CheckResult(false,
                        "For two fields following each " +
                            "other one is not a continuation " +
                            "of the other (they differ more than in two places).");
                }
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/Main.java
  visible: true
  text: |+
    package tictactoe;

    import java.io.BufferedReader;
    import java.io.IOException;
    import java.io.InputStreamReader;
    import java.util.Random;
    import java.util.Scanner;


    abstract class Game {
        public static String[][] ticTaeToeField = {{" ", " ", " "}, {" ", " ", " "}, {" ", " ", " "}};
        public static int[] move = new int[2];
        public static int blockinX;
        public static int blockinY;

        void drawField() {
            System.out.println("---------");
            System.out.printf("| %s %s %s |", ticTaeToeField[0][0], ticTaeToeField[0][1], ticTaeToeField[0][2]);
            System.out.println();
            System.out.printf("| %s %s %s |", ticTaeToeField[1][0], ticTaeToeField[1][1], ticTaeToeField[1][2]);
            System.out.println();
            System.out.printf("| %s %s %s |", ticTaeToeField[2][0], ticTaeToeField[2][1], ticTaeToeField[2][2]);
            System.out.println();
            System.out.println("---------");

        }

        static boolean checkInput(String coordinates) {
            String[][] correctionMatrix = new String[3][3];
            correctionMatrix[0][0] = "1 3";
            correctionMatrix[0][1] = "2 3";
            correctionMatrix[0][2] = "3 3";
            correctionMatrix[1][0] = "1 2";
            correctionMatrix[1][1] = "2 2";
            correctionMatrix[1][2] = "3 2";
            correctionMatrix[2][0] = "1 1";
            correctionMatrix[2][1] = "2 1";
            correctionMatrix[2][2] = "3 1";
            int adjustedX = 0;
            int adjustedY = 0;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (coordinates.equals(correctionMatrix[i][j])) {
                        adjustedX = i;
                        adjustedY = j;
                    }
                }
            }
            String[] coordinatesArrayString = coordinates.split(" ");
            int x = 0;
            int y = 0;
            boolean isCorrect = false;
            try {
                x = Integer.parseInt(coordinatesArrayString[0]);
                y = Integer.parseInt(coordinatesArrayString[1]);
                isCorrect = true;
                if (x < 1 || y < 1 || x > 3 || y > 3) {
                    System.out.print("Coordinates should be from 1 to 3!");
                    isCorrect = false;
                } else if (!" ".equals(ticTaeToeField[adjustedX][adjustedY])) {
                    System.out.println("This cell is occupied! Choose another one!");
                    isCorrect = false;
                } else {
                    move[0] = adjustedX;
                    move[1] = adjustedY;
                }
            } catch (NumberFormatException e) {
                System.out.print("You should enter numbers!");
            }

            return isCorrect;
        }

        public boolean threeInARowCheck() {

            boolean isFinished = false;
            if (ticTaeToeField[0][0].equals(ticTaeToeField[0][1]) && ticTaeToeField[0][1].equals(ticTaeToeField[0][2])
                    && !" ".equals(ticTaeToeField[0][0])) {
                System.out.println(ticTaeToeField[0][0] + " wins");
                isFinished = true;
            }else if (ticTaeToeField[1][0].equals(ticTaeToeField[1][1]) && ticTaeToeField[1][1].equals(ticTaeToeField[1][2])
                    && !" ".equals(ticTaeToeField[1][0])) {
                System.out.println(ticTaeToeField[1][0] + " wins");
                isFinished = true;
            }else if (ticTaeToeField[2][0].equals(ticTaeToeField[2][1]) && ticTaeToeField[2][1].equals(ticTaeToeField[2][2]) &&
                    !" ".equals(ticTaeToeField[2][0])) {
                System.out.println(ticTaeToeField[2][0] + " wins");
                isFinished = true;
            }else if (ticTaeToeField[0][0].equals(ticTaeToeField[1][0]) && ticTaeToeField[1][0].equals(ticTaeToeField[2][0]) &&
                    !" ".equals(ticTaeToeField[0][0])) {
                System.out.println(ticTaeToeField[0][0] + " wins");
                isFinished = true;
            }else if (ticTaeToeField[0][1].equals(ticTaeToeField[1][1]) && ticTaeToeField[1][1].equals(ticTaeToeField[2][1]) &&
                    !" ".equals(ticTaeToeField[0][1])) {
                System.out.println(ticTaeToeField[0][1] + " wins");
                isFinished = true;
            }else if (ticTaeToeField[0][2].equals(ticTaeToeField[1][2]) && ticTaeToeField[1][2].equals(ticTaeToeField[2][2]) &&
                    !" ".equals(ticTaeToeField[0][2])) {
                System.out.println(ticTaeToeField[0][2] + " wins");
                isFinished = true;
            }else if (ticTaeToeField[0][0].equals(ticTaeToeField[1][1]) && ticTaeToeField[1][1].equals(ticTaeToeField[2][2]) &&
                    !" ".equals(ticTaeToeField[0][0])) {
                System.out.println(ticTaeToeField[0][0] + " wins");
                isFinished = true;

            }else if (ticTaeToeField[0][2].equals(ticTaeToeField[1][1]) && ticTaeToeField[1][1].equals(ticTaeToeField[2][0]) &&
                    !" ".equals(ticTaeToeField[0][2])) {
                System.out.println(ticTaeToeField[2][0] + " wins");
                isFinished = true;
            }
            return isFinished;
        }

        abstract public void makingMove();

        public boolean nextWinningMove(String winningMove) {
            boolean isEmpty = true;
            if (ticTaeToeField[0][0].equals(ticTaeToeField[0][1]) && winningMove.equals(ticTaeToeField[0][0])
                    && !" ".equals(ticTaeToeField[0][0]) && " ".equals(ticTaeToeField[0][2])) {
                    ticTaeToeField[0][2] = winningMove;
                    isEmpty = false;
                    blockinX = 0;
                    blockinY = 2;
            } else if (ticTaeToeField[0][0].equals(ticTaeToeField[0][2]) && winningMove.equals(ticTaeToeField[0][0])
                    && !" ".equals(ticTaeToeField[0][0])&& " ".equals(ticTaeToeField[0][1])) {
                ticTaeToeField[0][1] = winningMove;
                isEmpty = false;
                blockinX = 0;
                blockinY = 1;
            } else if (ticTaeToeField[0][1].equals(ticTaeToeField[0][2]) && winningMove.equals(ticTaeToeField[0][1])
                    && !" ".equals(ticTaeToeField[0][1])&& " ".equals(ticTaeToeField[0][0])) {
                ticTaeToeField[0][0] = winningMove;
                isEmpty = false;
                blockinX = 0;
                blockinY = 0;
            } else if (ticTaeToeField[1][0].equals(ticTaeToeField[1][1]) && winningMove.equals(ticTaeToeField[1][0])
                    && !" ".equals(ticTaeToeField[1][0])&& " ".equals(ticTaeToeField[1][2])) {
                ticTaeToeField[1][2] = winningMove;
                isEmpty = false;
                blockinX = 1;
                blockinY = 2;
            } else if (ticTaeToeField[1][0].equals(ticTaeToeField[1][2]) && winningMove.equals(ticTaeToeField[1][0])
                    && !" ".equals(ticTaeToeField[1][0])&& " ".equals(ticTaeToeField[1][1])) {
                ticTaeToeField[1][1] = winningMove;
                isEmpty = false;
                blockinX = 1;
                blockinY = 1;
            } else if (ticTaeToeField[1][1].equals(ticTaeToeField[1][2]) && winningMove.equals(ticTaeToeField[1][1])
                    && !" ".equals(ticTaeToeField[1][1])&& " ".equals(ticTaeToeField[1][0])) {
                ticTaeToeField[1][0] = winningMove;
                isEmpty = false;
                blockinX = 1;
                blockinY = 0;
            } else if (ticTaeToeField[2][0].equals(ticTaeToeField[2][1]) && winningMove.equals(ticTaeToeField[2][0])
                    && !" ".equals(ticTaeToeField[2][0])&& " ".equals(ticTaeToeField[2][2])) {
                ticTaeToeField[2][2] = winningMove;
                isEmpty = false;
                blockinX = 2;
                blockinY = 2;
            } else if (ticTaeToeField[2][0].equals(ticTaeToeField[2][2]) && winningMove.equals(ticTaeToeField[2][0])
                    && !" ".equals(ticTaeToeField[2][0])&& " ".equals(ticTaeToeField[2][1])) {
                ticTaeToeField[2][1] = winningMove;
                isEmpty = false;
                blockinX = 2;
                blockinY = 1;
            } else if (ticTaeToeField[2][1].equals(ticTaeToeField[2][2]) && winningMove.equals(ticTaeToeField[2][1])
                    && !" ".equals(ticTaeToeField[2][1])&& " ".equals(ticTaeToeField[2][0])) {
                ticTaeToeField[2][0] = winningMove;
                isEmpty = false;
                blockinX = 2;
                blockinY = 0;
            } else if (ticTaeToeField[0][0].equals(ticTaeToeField[1][0]) && winningMove.equals(ticTaeToeField[0][0])
                    && !" ".equals(ticTaeToeField[0][0])&& " ".equals(ticTaeToeField[2][0])) {
                ticTaeToeField[2][0] = winningMove;
                isEmpty = false;
                blockinX = 2;
                blockinY = 0;
            } else if (ticTaeToeField[0][0].equals(ticTaeToeField[2][0]) && winningMove.equals(ticTaeToeField[0][0])
                    && !" ".equals(ticTaeToeField[0][0])&& " ".equals(ticTaeToeField[1][0])) {
                ticTaeToeField[1][0] = winningMove;
                isEmpty = false;
                blockinX = 1;
                blockinY = 0;
            } else if (ticTaeToeField[1][0].equals(ticTaeToeField[2][0]) && winningMove.equals(ticTaeToeField[1][0])
                    && !" ".equals(ticTaeToeField[1][0])&& " ".equals(ticTaeToeField[0][0])) {
                ticTaeToeField[0][0] = winningMove;
                isEmpty = false;
                blockinX = 0;
                blockinY = 0;
            } else if (ticTaeToeField[0][1].equals(ticTaeToeField[1][1]) && winningMove.equals(ticTaeToeField[0][1])
                    && !" ".equals(ticTaeToeField[0][1])&& " ".equals(ticTaeToeField[2][1])) {
                ticTaeToeField[2][1] = winningMove;
                isEmpty = false;
                blockinX = 2;
                blockinY = 1;
            } else if (ticTaeToeField[0][1].equals(ticTaeToeField[2][1]) && winningMove.equals(ticTaeToeField[0][1])
                    && !" ".equals(ticTaeToeField[0][1])&& " ".equals(ticTaeToeField[1][1])) {
                ticTaeToeField[1][1] = winningMove;
                isEmpty = false;
                blockinX = 1;
                blockinY = 1;
            } else if (ticTaeToeField[1][1].equals(ticTaeToeField[2][1]) && winningMove.equals(ticTaeToeField[1][1])
                    && !" ".equals(ticTaeToeField[1][1]) && " ".equals(ticTaeToeField[0][1])) {
                ticTaeToeField[0][1] = winningMove;
                isEmpty = false;
                blockinX = 0;
                blockinY = 1;
            } else if (ticTaeToeField[0][2].equals(ticTaeToeField[1][2]) && winningMove.equals(ticTaeToeField[0][2])
                    && !" ".equals(ticTaeToeField[0][2]) && " ".equals(ticTaeToeField[2][2])) {
                ticTaeToeField[2][2] = winningMove;
                isEmpty = false;
                blockinX = 2;
                blockinY = 2;
            } else if (ticTaeToeField[0][2].equals(ticTaeToeField[2][2]) && winningMove.equals(ticTaeToeField[0][2])
                    && !" ".equals(ticTaeToeField[0][2])&& " ".equals(ticTaeToeField[1][2])) {
                ticTaeToeField[1][2] = winningMove;
                isEmpty = false;
                blockinX = 1;
                blockinY = 2;
            } else if (ticTaeToeField[1][2].equals(ticTaeToeField[2][2]) && winningMove.equals(ticTaeToeField[1][2])
                    && !" ".equals(ticTaeToeField[1][2])&& " ".equals(ticTaeToeField[0][2])) {
                ticTaeToeField[0][2] = winningMove;
                isEmpty = false;
                blockinX = 0;
                blockinY = 2;
            } else if (ticTaeToeField[0][0].equals(ticTaeToeField[1][1]) && winningMove.equals(ticTaeToeField[0][0])
                    && !" ".equals(ticTaeToeField[0][0])&& " ".equals(ticTaeToeField[2][2])) {
                ticTaeToeField[2][2] = winningMove;
                isEmpty = false;
                blockinX = 2;
                blockinY = 2;
            } else if (ticTaeToeField[0][0].equals(ticTaeToeField[2][2]) && winningMove.equals(ticTaeToeField[0][0])
                    && !" ".equals(ticTaeToeField[0][0])&& " ".equals(ticTaeToeField[1][1])) {
                ticTaeToeField[1][1] = winningMove;
                isEmpty = false;
                blockinX = 1;
                blockinY = 1;
            } else if (ticTaeToeField[1][1].equals(ticTaeToeField[2][2]) && winningMove.equals(ticTaeToeField[1][1])
                    && !" ".equals(ticTaeToeField[1][1]) && " ".equals(ticTaeToeField[0][0])) {
                ticTaeToeField[0][0] = winningMove;
                isEmpty = false;
                blockinX = 0;
                blockinY = 0;
            } else if (ticTaeToeField[0][2].equals(ticTaeToeField[1][1]) && winningMove.equals(ticTaeToeField[0][2])
                    && !" ".equals(ticTaeToeField[0][2])&& " ".equals(ticTaeToeField[2][0])) {
                ticTaeToeField[2][0] = winningMove;
                isEmpty = false;
                blockinX = 2;
                blockinY = 0;
            } else if (ticTaeToeField[0][2].equals(ticTaeToeField[2][0]) && winningMove.equals(ticTaeToeField[0][2])
                    && !" ".equals(ticTaeToeField[0][2])&& " ".equals(ticTaeToeField[1][1])) {
                ticTaeToeField[1][1] = winningMove;
                isEmpty = false;
                blockinX = 1;
                blockinY = 1;
            } else if (ticTaeToeField[2][0].equals(ticTaeToeField[1][1]) && winningMove.equals(ticTaeToeField[2][0])
                    && !" ".equals(ticTaeToeField[2][0])&& " ".equals(ticTaeToeField[0][2])) {
                ticTaeToeField[0][2] = winningMove;
                isEmpty = false;
                blockinX = 0;
                blockinY = 2;
            }
            return isEmpty;
        }


    }

    class EasyEasy extends Game {

        @Override
        public void makingMove() {
            boolean isX = true;
            Random rand = new Random();
            int x = 0;
            int y = 0;
            boolean isFinished = false;
            drawField();
            int numberOfMoves = 0;
            while (numberOfMoves < 9){
                //drawField();
                System.out.println("Making move level \"easy\"");

                do {
                    x = rand.nextInt(3);
                    y = rand.nextInt(3);
                } while (!" ".equals(ticTaeToeField[x][y]));
                if (isX) {
                    ticTaeToeField[x][y] = "X";
                    isX = false;
                } else {
                    ticTaeToeField[x][y] = "O";
                    isX = true;
                }

                drawField();
                if (threeInARowCheck()) {
                    break;
                }

                numberOfMoves++;
            }
            if (numberOfMoves == 9) {
                System.out.println("Draw");
            }

        }
    }


    class UserEasy extends Game {

        @Override
        public void makingMove() {
            boolean isCorrect;
            int countOfMoves = 0;
            Scanner scn = new Scanner(System.in);
            while(countOfMoves < 9) {
                isCorrect = false;
                drawField();
                System.out.println("Making move level \"easy\"");
                while (!isCorrect) {
                    System.out.print("Enter the coordinates: ");
                    String coordinates = scn.nextLine();
                    isCorrect = checkInput(coordinates);
                }
                ticTaeToeField[move[0]][move[1]] = "X";
                countOfMoves++;
                if (countOfMoves == 9) {
                    break;
                }
                if (threeInARowCheck()) {
                    break;
                }
                drawField();
                System.out.println("Making move level \"easy\"");
                threeInARowCheck();
                if (threeInARowCheck()) {
                    break;
                }
                Random rand = new Random();
                int x = 0;
                int y = 0;
                do {
                    x = rand.nextInt(3);
                    y = rand.nextInt(3);
                } while (!" ".equals(ticTaeToeField[x][y]));
                ticTaeToeField[x][y] = "O";
                countOfMoves++;
                threeInARowCheck();
                if (threeInARowCheck()) {
                    break;
                }

            }
            if (countOfMoves == 9) {
                System.out.println("Draw");
            }
        }
    }

    class EasyUser extends Game {

        @Override
        public void makingMove() {
            boolean isCorrect;
            int count = 0;
            boolean isX = true;
            Scanner scn = new Scanner(System.in);
            for (int i = 0; i < 9; i++) {
                isCorrect = false;
                drawField();
                System.out.println("Making move level \"easy\"");
                if (isX) {
                    Random rand = new Random();
                    int x = 0;
                    int y = 0;
                    do {
                        x = rand.nextInt(3);
                        y = rand.nextInt(3);
                    } while (!" ".equals(ticTaeToeField[x][y]));
                    ticTaeToeField[x][y] = "X";
                    isX = false;
                } else {
                    while (!isCorrect) {
                        System.out.print("Enter the coordinates: ");
                        String coordinates = scn.nextLine();
                        isCorrect = checkInput(coordinates);
                    }
                    ticTaeToeField[move[0]][move[1]] = "O";
                }
                threeInARowCheck();
                if (threeInARowCheck()) {
                    break;
                }
                count++;

            }
            if (count == 9) {
                System.out.println("Draw");
            }
        }
    }

    class UserUser extends Game {

        @Override
        public void makingMove() {
            boolean isCorrect;
            int count = 0;
            boolean isX = true;
            Scanner scn = new Scanner(System.in);
            int x = 0;
            int y = 0;
            while (count < 9) {
                isCorrect = false;
                while (!isCorrect) {
                    System.out.print("Enter the coordinates: ");
                    String coordinates = scn.nextLine();
                    isCorrect = checkInput(coordinates);
                }
                if (isX) {
                    ticTaeToeField[move[0]][move[1]] = "X";
                    isX = false;

                } else {
                ticTaeToeField[move[0]][move[1]] = "O";
                isX = true;
                }
                drawField();
                if (threeInARowCheck()) {
                    break;
                }

                count++;
            }
            if (count == 9) {
                System.out.println("Draw");
            }
        }
    }

    class MediumUser extends Game {

        @Override
        public void makingMove() {
            boolean isCorrect;
            int count = 0;
            boolean isX = true;
            Scanner scn = new Scanner(System.in);
            drawField();
            while (count < 9) {
                isCorrect = false;
                if (isX) {
                    boolean isEmpty = nextWinningMove("X");
                    if (isEmpty) {
                        isEmpty = nextWinningMove("O");
                        if (!isEmpty) {
                            ticTaeToeField[blockinX][blockinY] = "X";
                        }

                    }
                    if (isEmpty) {
                        Random rand = new Random();
                        int x;
                        int y;
                        do {
                            x = rand.nextInt(3);
                            y = rand.nextInt(3);
                        } while (!" ".equals(ticTaeToeField[x][y]));
                        ticTaeToeField[x][y] = "X";
                    }
                        count++;
                        isX = false;
                    System.out.println("Making move level \"medium\"");
                    drawField();


                } else {
                    while (!isCorrect) {
                        System.out.print("Enter the coordinates: ");
                        String coordinates = scn.nextLine();
                        isCorrect = checkInput(coordinates);
                    }
                    ticTaeToeField[move[0]][move[1]] = "O";
                    count++;
                    isX = true;
                    drawField();
                }
                if (threeInARowCheck()) {
                    break;
                }
            }
            if (count == 9) {
                System.out.println("Draw");
            }
        }
    }

    class UserMedium extends Game {

        @Override
        public void makingMove() {
            boolean isCorrect;
            int countOfMoves = 0;
            Scanner scn = new Scanner(System.in);
            boolean isEmpty;
            while(countOfMoves < 9) {
                isCorrect = false;
                isEmpty = true;
                drawField();
                System.out.println("Making move level \"medium\"");
                while (!isCorrect) {
                    System.out.print("Enter the coordinates: ");
                    String coordinates = scn.nextLine();
                    isCorrect = checkInput(coordinates);
                }
                ticTaeToeField[move[0]][move[1]] = "X";
                countOfMoves++;
                if (countOfMoves == 9) {
                    break;
                }
                drawField();
                System.out.println("Making move level \"medium\"");
                threeInARowCheck();
                if (threeInARowCheck()) {
                    break;
                }
                isEmpty = nextWinningMove("O");
                if (isEmpty) {
                    isEmpty = nextWinningMove("X");
                    if (!isEmpty) {
                        ticTaeToeField[blockinX][blockinY] = "O";
                    }

                }
                if (isEmpty) {
                    Random rand = new Random();
                    int x = 0;
                    int y = 0;
                    do {
                        x = rand.nextInt(3);
                        y = rand.nextInt(3);
                    } while (!" ".equals(ticTaeToeField[x][y]));
                    ticTaeToeField[x][y] = "O";
                }
                countOfMoves++;
                threeInARowCheck();
                if (threeInARowCheck()) {
                    break;
                }

            }
            if (countOfMoves == 9) {
                System.out.println("Draw");
            }
        }
    }

    class MediumMedium extends Game {

        @Override
        public void makingMove() {
            boolean isX = true;
            Random rand = new Random();
            int x = 0;
            int y = 0;
            boolean isEmpty;
            drawField();
            int numberOfMoves = 0;
            while (numberOfMoves <= 9){
                //drawField();
                isEmpty = true;
                System.out.println("Making move level \"medium\"");
                if (isX) {
                    isEmpty = nextWinningMove("X");
                    if (isEmpty) {
                        isEmpty = nextWinningMove("O");
                        if (!isEmpty) {
                            ticTaeToeField[blockinX][blockinY] = "X";
                        }

                    }
                    if (isEmpty) {
                        do {
                            x = rand.nextInt(3);
                            y = rand.nextInt(3);
                        } while (!" ".equals(ticTaeToeField[x][y]));
                        {
                            ticTaeToeField[x][y] = "X";
                        }
                    }
                    isX = false;

                } else {
                    isEmpty = nextWinningMove("O");
                    if (isEmpty) {
                        isEmpty = nextWinningMove("X");
                        if (!isEmpty) {
                            ticTaeToeField[blockinX][blockinY] = "O";
                        }

                    }
                    if (isEmpty) {

                        do {
                            x = rand.nextInt(3);
                            y = rand.nextInt(3);
                        } while (!" ".equals(ticTaeToeField[x][y]));
                        {
                            ticTaeToeField[x][y] = "O";
                        }
                    }
                    isX = true;

                }
                drawField();
                if (threeInARowCheck()) {
                    break;
                }
                numberOfMoves++;
                if (numberOfMoves == 9) {
                    break;
                }

            }
            if (numberOfMoves == 9) {
                System.out.println("Draw");
            }

        }
    }

    class MediumEasy extends Game {

        @Override
        public void makingMove() {
            boolean isX = true;
            Random rand = new Random();
            int x = 0;
            int y = 0;
            boolean isEmpty;
            drawField();
            int numberOfMoves = 0;
            while (numberOfMoves <= 9){
                //drawField();
                isEmpty = true;
                System.out.println("Making move level \"medium\"");
                if (isX) {
                    isEmpty = nextWinningMove("X");
                    if (isEmpty) {
                        isEmpty = nextWinningMove("O");
                        if (!isEmpty) {
                            ticTaeToeField[blockinX][blockinY] = "X";
                        }

                    }
                    if (isEmpty) {
                        do {
                            x = rand.nextInt(3);
                            y = rand.nextInt(3);
                        } while (!" ".equals(ticTaeToeField[x][y]));
                        {
                            ticTaeToeField[x][y] = "X";
                        }
                    }
                    isX = false;

                } else {
                        do {
                            x = rand.nextInt(3);
                            y = rand.nextInt(3);
                        } while (!" ".equals(ticTaeToeField[x][y]));
                        {
                            ticTaeToeField[x][y] = "O";
                        }
                    isX = true;

                }
                drawField();
                if (threeInARowCheck()) {
                    break;
                }
                numberOfMoves++;
                if (numberOfMoves == 9) {
                    break;
                }

            }
            if (numberOfMoves == 9) {
                System.out.println("Draw");
            }
        }
    }

    class EasyMedium extends Game {

        @Override
        public void makingMove() {
            boolean isX = true;
            Random rand = new Random();
            int x = 0;
            int y = 0;
            boolean isEmpty;
            drawField();
            int numberOfMoves = 0;
            while (numberOfMoves <= 9){
                //drawField();
                System.out.println("Making move level \"medium\"");
                if (isX) {
                        do {
                            x = rand.nextInt(3);
                            y = rand.nextInt(3);
                        } while (!" ".equals(ticTaeToeField[x][y]));
                        {
                            ticTaeToeField[x][y] = "X";
                        }
                    isX = false;

                } else {
                    isEmpty = nextWinningMove("X");
                    if (isEmpty) {
                        isEmpty = nextWinningMove("O");
                        if (!isEmpty) {
                            ticTaeToeField[blockinX][blockinY] = "X";
                        }

                    }
                    if (isEmpty) {
                        do {
                            x = rand.nextInt(3);
                            y = rand.nextInt(3);
                        } while (!" ".equals(ticTaeToeField[x][y]));
                        {
                            ticTaeToeField[x][y] = "O";
                        }
                    }
                    isX = true;

                }
                drawField();
                if (threeInARowCheck()) {
                    break;
                }
                numberOfMoves++;
                if (numberOfMoves == 9) {
                    break;
                }

            }
            if (numberOfMoves == 9) {
                System.out.println("Draw");
            }

        }
    }

    public class Main {

        public static String[] inputCommand = new String[2];

        public static boolean checkInputOfCommand(String command) {
            String[] commandArray = command.split(" ");
            boolean isCommandCorrect = false;
            if (commandArray.length <= 2) {
                if (commandArray[0].equals("exit") ) {
                    System.exit(0);
                } else if (!commandArray[0].equals("start")){
                    System.out.println("Bad Parameters!");
                }
            } else {
                if ((commandArray[1].equals("easy") || commandArray[2].equals("user") || commandArray[2].equals("medium")) ||
                        (commandArray[1].equals("user") || commandArray[2].equals("easy"))) {

                    inputCommand[0] = commandArray[1];
                    inputCommand[1] = commandArray[2];
                    isCommandCorrect = true;
                } else {
                    System.out.println("Bad Parameters!");
                    isCommandCorrect = false;
                }
            }
            return isCommandCorrect;
        }


        public static void main(String[] args) throws IOException {
            // write your code here
            BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
            boolean isCommandCorrect = false;
            while (!isCommandCorrect) {
                System.out.print("Input command: ");
                String inputCommand = reader.readLine();
                isCommandCorrect = checkInputOfCommand(inputCommand);
            }
            switch (inputCommand[0]) {
                case "easy":
                    switch (inputCommand[1]) {
                        case "easy":
                            EasyEasy newGame = new EasyEasy();
                            newGame.makingMove();
                            break;
                        case "user":
                            EasyUser newGame1 = new EasyUser();
                            newGame1.makingMove();
                            break;
                        case "medium":
                            EasyMedium newGame2 = new EasyMedium();
                            newGame2.makingMove();
                            break;
                        default:
                    }
                    break;
                case "user" :
                    switch (inputCommand[1]) {
                        case "easy":
                            UserEasy newGame = new UserEasy();
                            newGame.makingMove();
                            break;
                        case "user":
                            UserUser newGame1 = new UserUser();
                            newGame1.makingMove();
                            break;
                        case "medium":
                            UserMedium newGame2 = new UserMedium();
                            newGame2.makingMove();
                            break;
                        default:
                    }

                    break;

                case "medium":
                    switch ((inputCommand[1])) {
                        case "easy":
                            MediumEasy newGame = new MediumEasy();
                            newGame.makingMove();
                            break;
                        case "user":
                            MediumUser newGame2 = new MediumUser();
                            newGame2.makingMove();
                            break;

                        case "medium":
                            MediumMedium newGame3 = new MediumMedium();
                            newGame3.makingMove();
                            break;
                        default:
                    }

                    break;

                default:
            }
        }
    }

  learner_created: true
feedback_link: https://hyperskill.org/projects/81/stages/451/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/81/stages/451/implement">JetBrains
    Academy</a>
  time: Fri, 10 Jul 2020 03:40:55 UTC
record: -1
